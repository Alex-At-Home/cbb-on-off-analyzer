// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`rosterCompareQuery rosterCompareQuery   1`] = `
{
   "runtime_mappings": {
      "vs_high_major": {
         "type": "boolean",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit((doc['common_lookup'].value & 1) > 0)"
         }
      },
      "in_conf": {
         "type": "boolean",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit((doc['common_lookup'].value & 2) > 0)"
         }
      },
      "vs_rank": {
         "type": "long",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit((doc['common_lookup'].value >> 2) & 511)"
         }
      },
      "vs_3p": {
         "type": "double",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) {\\n            def _3p = (doc['common_lookup'].value >> 11)  & 1023;\\n            if (_3p > 0) emit(0.1*_3p);\\n          }"
         }
      },
      "vs_adj_off": {
         "type": "double",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit(0.1*((doc['common_lookup'].value >> 21) & 2047))"
         }
      },
      "vs_adj_def": {
         "type": "double",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit(0.1*((doc['common_lookup'].value >> 32) & 2047))"
         }
      },
      "common_lookup": {
         "type": "long",
         "script": {
            "source": "\\n            if (!params.kp_info.isEmpty()) {\\n              def raw_name = doc[params.field_name].value;\\n              def kp_name = params.pbp_to_kp[raw_name];\\n              if (kp_name == null) {\\n                 kp_name = raw_name;\\n              } else {\\n                 kp_name = kp_name.pbp_kp_team;\\n              }\\n              def oppo = params.kp_info[kp_name];\\n              if (oppo != null) {\\n                def vs_high_major = oppo[\\"is_high_major\\"] ?: 1;\\n                if (vs_high_major instanceof String) {\\n                  vs_high_major = 0;\\n                }\\n                def oppo_conf = oppo[\\"conf\\"];\\n                def team_conf = params.conf;\\n                if (team_conf == \\"*\\") {      \\n                  def raw_team_name = doc[\\"team.team.keyword\\"].value; \\n                  def team_kp_name = params.pbp_to_kp[raw_team_name];\\n                  if (team_kp_name == null) {\\n                    team_kp_name = raw_team_name;\\n                  } else {\\n                    team_kp_name = team_kp_name.pbp_kp_team;\\n                  }\\n                  def team_kp = params.kp_info[team_kp_name];\\n                  if (team_kp != null) {\\n                    team_conf = team_kp[\\"conf\\"];\\n                  }\\n                }\\n                def in_conf = team_conf.equals(oppo_conf);\\n                def hca = 0;\\n                if (doc[\\"location_type.keyword\\"].size() > 0) {\\n                  if (doc[\\"location_type.keyword\\"].value == \\"Neutral\\") {\\n                    hca = 25;\\n                  } else if (doc[\\"location_type.keyword\\"].value == \\"Away\\") {\\n                    hca = 50;\\n                  }\\n                }\\n                def margin_rank = Math.max(1, (oppo[\\"stats.adj_margin.rank\\"] ?: 0) - hca);\\n\\n                def _3p = oppo[\\"stats.off._3p_pct.value\\"] ?: 0.0;\\n                _3p = (_3p * 10).longValue() & 1023;\\n\\n                def adj_off = oppo[\\"stats.adj_off.value\\"] ?: 0;\\n                adj_off = (adj_off * 10).longValue() & 2047;\\n\\n                def adj_def = oppo[\\"stats.adj_def.value\\"] ?: 0;\\n                adj_def = (adj_def * 10).longValue() & 2047;\\n\\n                long returnVal = 0L | (vs_high_major << 0)\\n                  | ((in_conf ? 1 : 0) << 1)\\n                  | ((margin_rank.longValue() & 511) << 2)\\n                  | (_3p.longValue() << 11)\\n                  | (adj_off.longValue() << 21)\\n                  | (adj_def.longValue() << 32)\\n                  ;\\n                emit(returnVal);\\n              }\\n            }\\n          ",
            "lang": "painless",
            "params": {
               "pbp_to_kp": {
                  "name1": "name1b"
               },
               "field_name": "opponent.team.keyword",
               "kp_info": {
                  "team": {
                     "stats": 0
                  }
               },
               "conf": ""
            }
         }
      }
   },
   "_source": {
      "includes": [],
      "excludes": []
   },
   "size": 0,
   "aggregations": {
      "tri_filter": {
         "filters": {
            "filters": {
               "off": {
                  "query_string": {
                     "query": "(players.id:(NOT *)) AND (players.id:(base))"
                  }
               },
               "on": {
                  "query_string": {
                     "query": "(players.id:(NOT *)) AND (players.id:(base))"
                  }
               },
               "baseline": {
                  "query_string": {
                     "query": "players.id:(base)"
                  }
               }
            }
         },
         "aggregations": {
            "global_poss_count": {
               "sum": {
                  "field": "team_stats.num_possessions"
               }
            },
            "player": {
               "terms": {
                  "field": "players.id.keyword",
                  "size": 100
               },
               "aggregations": {
                  "poss_count": {
                     "sum": {
                        "field": "team_stats.num_possessions"
                     }
                  },
                  "sort": {
                     "bucket_sort": {
                        "from": 0,
                        "sort": [
                           {
                              "poss_count": {
                                 "order": "desc"
                              }
                           }
                        ],
                        "size": 100
                     }
                  }
               }
            }
         }
      }
   },
   "query": {
      "bool": {
         "filter": [],
         "must_not": [],
         "should": [],
         "minimum_should_match": 0,
         "must": [
            {
               "term": {
                  "team.team.keyword": "TestTeam"
               }
            },
            {
               "query_string": {
                  "query": "vs_rank:[10 TO 100]"
               }
            }
         ]
      }
   }
}
`;

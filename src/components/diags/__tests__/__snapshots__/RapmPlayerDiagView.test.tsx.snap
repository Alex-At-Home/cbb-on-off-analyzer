// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RapmPlayerDiagView RapmPlayerDiagView - should create snapshot 1`] = `
<span>
  <b>
    RAPM diagnostics for [
    Wiggins, Aaron
    ]:
  </b>
   adj_off=[
  <b>
    5.15
  </b>
  ], adj_def=[
  <b>
    -4.94
  </b>
  ] =
  <ul>
    <li>
      RAPM contribution: off=[
      <b>
        5.15
      </b>
      ], def=[
      <b>
        -4.48
      </b>
      ], total=[
      <b>
        9.62
      </b>
      ]
    </li>
    <ul>
      <li>
        To combat the tendency of RAPM to over-share the contribution of the strongest players amongst their typical team-mates, we take the weighted average player correlation (see "Player correlation table" in the Global Diagnostics below) [
        <b>
          1.09
        </b>
        ]
        <span>
           (hand-overwritten to 
          <b>
            0.50
          </b>
          )
        </span>
        , ...
      </li>
      <li>
        ... and use that % of the player's "Adj Rating+" ([
        <b>
          0.50
        </b>
        ]*[
        <b>
          4.00
        </b>
        ]) = [
        <b>
          2.00
        </b>
        ] as a prior in the RAPM calculation.
      </li>
      <ul>
        <li>
          <i>
            (Currently we only do this for offense because ORtg is a much more reliable individual stat than DRtg)
          </i>
        </li>
      </ul>
      <li>
        ie Off RAPM [
        <b>
          5.15
        </b>
        ] = Raw RAPM [
        <b>
          3.15
        </b>
        ] + Prior [
        <b>
          2.00
        </b>
        ]
      </li>
    </ul>
    <span>
      <li>
        Â + POST RAPM adjustment: off=[
        <b>
          0.00
        </b>
        ], def=[
        <b>
          -0.47
        </b>
        ], total=[
        <b>
          0.47
        </b>
        ]
      </li>
      <ul>
        <li>
          We calculate a team adjustment (off=[
          <b>
            -10.15
          </b>
          ] def=[
          <b>
            -2.07
          </b>
          ]) to reduce/remove the the delta between total adjusted efficiency and RAPM (due to the regression factor): eg compare 
          <em>
            observed
          </em>
           (off=[
          <b>
            10.00
          </b>
          ] def=[
          <b>
            -20.00
          </b>
          ]) vs 
          <em>
            derived solely from RAPM
          </em>
           (off=[
          <b>
            20.15
          </b>
          ] def=[
          <b>
            -17.93
          </b>
          ]).
        </li>
        <span>
          <li>
            Then we calculate a player's contribution to this team total - currently this is a fraction of "Adj Rtg+": off=[
            <b>
              4.00
            </b>
            ] def=[
            <b>
              -4.00
            </b>
            ]), ...
          </li>
          <li>
            ... chosen so that a minutes-weighted average of the ratings sums to the team value: off=[
            <b>
              0.00
            </b>
            ], def=[
            <b>
              -0.47
            </b>
            ]
            <ul>
              <li>
                <em>
                   (eg incorporating the % on floor [
                  <b>
                    82
                    %
                  </b>
                  ] (of [
                  <b>
                    101
                  </b>
                  ] poss, this is an off=[
                  <b>
                    0.00
                  </b>
                  ] def=[
                  <b>
                    -0.38
                  </b>
                  ] "slice" of the team total of off=[
                  <b>
                    -10.15
                  </b>
                  ] def=[
                  <b>
                    -2.07
                  </b>
                  ])
                </em>
              </li>
            </ul>
          </li>
        </span>
      </ul>
    </span>
  </ul>
  (
  <b>
    More player diagnostics to come...
  </b>
  )
  <br />
  (
  <a
    href="#"
    onClick={[Function]}
  >
    Scroll to global RAPM diagnostics
  </a>
  )
</span>
`;

exports[`RapmUtils RapmUtils - buildPlayerContext 1`] = `
Object {
  "avgEfficiency": 100,
  "colToPlayer": Array [
    "Wiggins, Aaron",
    "Cowan, Anthony",
    "Smith, Jalen",
    "Morsell, Darryl",
    "Ayala, Eric",
    "Scott, Donta",
    "Player, Other",
    "Data, Dummy",
  ],
  "defLineupPoss": 944,
  "numLineups": 5,
  "numPlayers": 8,
  "offLineupPoss": 959,
  "playerToCol": Object {
    "Ayala, Eric": 4,
    "Cowan, Anthony": 1,
    "Data, Dummy": 7,
    "Morsell, Darryl": 3,
    "Player, Other": 6,
    "Scott, Donta": 5,
    "Smith, Jalen": 2,
    "Wiggins, Aaron": 0,
  },
  "priorInfo": Object {
    "includeStrong": Object {},
    "noWeakPrior": false,
    "playersStrong": Array [
      Object {
        "off_adj_ppp": 4.5,
      },
      Object {
        "off_adj_ppp": 5,
      },
      Object {
        "off_adj_ppp": 0,
      },
      Object {
        "off_adj_ppp": 0,
      },
      Object {
        "off_adj_ppp": 0,
      },
      Object {
        "off_adj_ppp": 0,
      },
      Object {
        "off_adj_ppp": 0,
      },
      Object {
        "off_adj_ppp": 0,
      },
    ],
    "playersWeak": Array [
      Object {
        "def_adj_ppp": -4.5,
        "off_adj_ppp": 4.5,
      },
      Object {
        "def_adj_ppp": -5,
        "off_adj_ppp": 5,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
    ],
    "strongWeight": -1,
    "useRecursiveWeakPrior": false,
  },
  "removalPct": 0,
  "removedPlayers": Object {},
  "unbiasWeight": 0,
}
`;

exports[`RapmUtils RapmUtils - buildPlayerContext 2`] = `
Object {
  "avgEfficiency": 100,
  "colToPlayer": Array [
    "Wiggins, Aaron",
    "Cowan, Anthony",
    "Smith, Jalen",
    "Morsell, Darryl",
    "Ayala, Eric",
    "Scott, Donta",
  ],
  "defLineupPoss": 794,
  "numLineups": 3,
  "numPlayers": 6,
  "offLineupPoss": 809,
  "playerToCol": Object {
    "Ayala, Eric": 4,
    "Cowan, Anthony": 1,
    "Morsell, Darryl": 3,
    "Scott, Donta": 5,
    "Smith, Jalen": 2,
    "Wiggins, Aaron": 0,
  },
  "priorInfo": Object {
    "includeStrong": Object {},
    "noWeakPrior": false,
    "playersStrong": Array [
      Object {
        "off_adj_ppp": 4.5,
      },
      Object {
        "off_adj_ppp": 5,
      },
      Object {
        "off_adj_ppp": 0,
      },
      Object {
        "off_adj_ppp": 0,
      },
      Object {
        "off_adj_ppp": 0,
      },
      Object {
        "off_adj_ppp": 0,
      },
    ],
    "playersWeak": Array [
      Object {
        "def_adj_ppp": -4.5,
        "off_adj_ppp": 4.5,
      },
      Object {
        "def_adj_ppp": -5,
        "off_adj_ppp": 5,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
      Object {
        "def_adj_ppp": 0,
        "off_adj_ppp": 0,
      },
    ],
    "strongWeight": -1,
    "useRecursiveWeakPrior": false,
  },
  "removalPct": 0.2,
  "removedPlayers": Object {
    "Data, Dummy": Array [
      0.05254860746190226,
      0.05254860746190226,
    ],
    "Player, Other": Array [
      0.1576458223857068,
      0.1576458223857068,
    ],
  },
  "unbiasWeight": 0,
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lineupStatsQuery lineupStatsQuery 1`] = `
{
   "runtime_mappings": {
      "vs_high_major": {
         "type": "boolean",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit((doc['common_lookup'].value & 1) > 0)"
         }
      },
      "in_conf": {
         "type": "boolean",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit((doc['common_lookup'].value & 2) > 0)"
         }
      },
      "vs_rank": {
         "type": "long",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit((doc['common_lookup'].value >> 2) & 511)"
         }
      },
      "vs_3p": {
         "type": "double",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) {\\n            def _3p = (doc['common_lookup'].value >> 11)  & 1023;\\n            if (_3p > 0) emit(0.1*_3p);\\n          }"
         }
      },
      "vs_adj_off": {
         "type": "double",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit(0.1*((doc['common_lookup'].value >> 21) & 2047))"
         }
      },
      "vs_adj_def": {
         "type": "double",
         "script": {
            "source": "if (0 != doc['common_lookup'].size()) emit(0.1*((doc['common_lookup'].value >> 32) & 2047))"
         }
      },
      "common_lookup": {
         "type": "long",
         "script": {
            "source": "\\n            if (!params.kp_info.isEmpty()) {\\n              def kp_name = params.pbp_to_kp[doc[\\"opponent.team.keyword\\"].value];\\n              if (kp_name == null) {\\n                 kp_name = doc[\\"opponent.team.keyword\\"].value;\\n              } else {\\n                 kp_name = kp_name.pbp_kp_team;\\n              }\\n              def oppo = params.kp_info[kp_name];\\n              if (oppo != null) {\\n                def vs_high_major = oppo[\\"is_high_major\\"] ?: 1;\\n                def oppo_conf = oppo[\\"conf\\"];\\n                def in_conf = params.conf.equals(oppo_conf);\\n                def margin_rank = oppo[\\"stats.adj_margin.rank\\"] ?: 0;\\n\\n                def _3p = oppo[\\"stats.off._3p_pct.value\\"] ?: 0.0;\\n                _3p = (_3p * 10).longValue() & 1023;\\n\\n                def adj_off = oppo[\\"stats.adj_off.value\\"] ?: 0;\\n                adj_off = (adj_off * 10).longValue() & 2047;\\n\\n                def adj_def = oppo[\\"stats.adj_def.value\\"] ?: 0;\\n                adj_def = (adj_def * 10).longValue() & 2047;\\n\\n                long returnVal = 0L | (vs_high_major << 0)\\n                  | ((in_conf ? 1 : 0) << 1)\\n                  | ((margin_rank & 511) << 2)\\n                  | (_3p.longValue() << 11)\\n                  | (adj_off.longValue() << 21)\\n                  | (adj_def.longValue() << 32)\\n                  ;\\n                emit(returnVal);\\n              }\\n            }\\n          ",
            "lang": "painless",
            "params": {
               "pbp_to_kp": {
                  "name1": "name1b"
               },
               "kp_info": {
                  "team": {
                     "stats": 0
                  }
               },
               "conf": ""
            }
         }
      }
   },
   "_source": {
      "includes": [],
      "excludes": []
   },
   "size": 0,
   "aggregations": {
      "lineups": {
         "aggregations": {
            "total_off_poss": {
               "sum": {
                  "field": "team_stats.num_possessions"
               }
            },
            "total_off_pts": {
               "sum": {
                  "field": "team_stats.pts"
               }
            },
            "total_off_to": {
               "sum": {
                  "field": "team_stats.to.total"
               }
            },
            "total_off_assist": {
               "sum": {
                  "field": "team_stats.assist.total"
               }
            },
            "total_off_scramble_to": {
               "sum": {
                  "field": "team_stats.to.orb"
               }
            },
            "total_off_scramble_assist": {
               "sum": {
                  "field": "team_stats.assist.orb"
               }
            },
            "total_off_trans_to": {
               "sum": {
                  "field": "team_stats.to.early"
               }
            },
            "total_off_trans_assist": {
               "sum": {
                  "field": "team_stats.assist.early"
               }
            },
            "total_off_stl": {
               "sum": {
                  "field": "team_stats.stl.total"
               }
            },
            "total_off_blk": {
               "sum": {
                  "field": "team_stats.blk.total"
               }
            },
            "total_off_foul": {
               "sum": {
                  "field": "team_stats.foul.total"
               }
            },
            "total_off_2p_attempts": {
               "sum": {
                  "field": "team_stats.fg_2p.attempts.total"
               }
            },
            "total_off_2p_made": {
               "sum": {
                  "field": "team_stats.fg_2p.made.total"
               }
            },
            "total_off_2p_ast": {
               "sum": {
                  "field": "team_stats.fg_2p.ast.total"
               }
            },
            "total_off_3p_attempts": {
               "sum": {
                  "field": "team_stats.fg_3p.attempts.total"
               }
            },
            "total_off_3p_made": {
               "sum": {
                  "field": "team_stats.fg_3p.made.total"
               }
            },
            "total_off_3p_ast": {
               "sum": {
                  "field": "team_stats.fg_3p.ast.total"
               }
            },
            "total_off_2prim_attempts": {
               "sum": {
                  "field": "team_stats.fg_rim.attempts.total"
               }
            },
            "total_off_2prim_made": {
               "sum": {
                  "field": "team_stats.fg_rim.made.total"
               }
            },
            "total_off_2prim_ast": {
               "sum": {
                  "field": "team_stats.fg_rim.ast.total"
               }
            },
            "total_off_2pmid_attempts": {
               "sum": {
                  "field": "team_stats.fg_mid.attempts.total"
               }
            },
            "total_off_2pmid_made": {
               "sum": {
                  "field": "team_stats.fg_mid.made.total"
               }
            },
            "total_off_2pmid_ast": {
               "sum": {
                  "field": "team_stats.fg_mid.ast.total"
               }
            },
            "total_off_fga": {
               "sum": {
                  "field": "team_stats.fg.attempts.total"
               }
            },
            "total_off_fgm": {
               "sum": {
                  "field": "team_stats.fg.made.total"
               }
            },
            "total_off_fta": {
               "sum": {
                  "field": "team_stats.ft.attempts.total"
               }
            },
            "total_off_ftm": {
               "sum": {
                  "field": "team_stats.ft.made.total"
               }
            },
            "total_off_scramble_2p_attempts": {
               "sum": {
                  "field": "team_stats.fg_2p.attempts.orb"
               }
            },
            "total_off_scramble_2p_made": {
               "sum": {
                  "field": "team_stats.fg_2p.made.orb"
               }
            },
            "total_off_scramble_2p_ast": {
               "sum": {
                  "field": "team_stats.fg_2p.ast.orb"
               }
            },
            "total_off_scramble_3p_attempts": {
               "sum": {
                  "field": "team_stats.fg_3p.attempts.orb"
               }
            },
            "total_off_scramble_3p_made": {
               "sum": {
                  "field": "team_stats.fg_3p.made.orb"
               }
            },
            "total_off_scramble_3p_ast": {
               "sum": {
                  "field": "team_stats.fg_3p.ast.orb"
               }
            },
            "total_off_scramble_2prim_attempts": {
               "sum": {
                  "field": "team_stats.fg_rim.attempts.orb"
               }
            },
            "total_off_scramble_2prim_made": {
               "sum": {
                  "field": "team_stats.fg_rim.made.orb"
               }
            },
            "total_off_scramble_2prim_ast": {
               "sum": {
                  "field": "team_stats.fg_rim.ast.orb"
               }
            },
            "total_off_scramble_2pmid_attempts": {
               "sum": {
                  "field": "team_stats.fg_mid.attempts.orb"
               }
            },
            "total_off_scramble_2pmid_made": {
               "sum": {
                  "field": "team_stats.fg_mid.made.orb"
               }
            },
            "total_off_scramble_2pmid_ast": {
               "sum": {
                  "field": "team_stats.fg_mid.ast.orb"
               }
            },
            "total_off_scramble_fga": {
               "sum": {
                  "field": "team_stats.fg.attempts.orb"
               }
            },
            "total_off_scramble_fgm": {
               "sum": {
                  "field": "team_stats.fg.made.orb"
               }
            },
            "total_off_scramble_fta": {
               "sum": {
                  "field": "team_stats.ft.attempts.orb"
               }
            },
            "total_off_scramble_ftm": {
               "sum": {
                  "field": "team_stats.ft.made.orb"
               }
            },
            "total_off_trans_2p_attempts": {
               "sum": {
                  "field": "team_stats.fg_2p.attempts.early"
               }
            },
            "total_off_trans_2p_made": {
               "sum": {
                  "field": "team_stats.fg_2p.made.early"
               }
            },
            "total_off_trans_2p_ast": {
               "sum": {
                  "field": "team_stats.fg_2p.ast.early"
               }
            },
            "total_off_trans_3p_attempts": {
               "sum": {
                  "field": "team_stats.fg_3p.attempts.early"
               }
            },
            "total_off_trans_3p_made": {
               "sum": {
                  "field": "team_stats.fg_3p.made.early"
               }
            },
            "total_off_trans_3p_ast": {
               "sum": {
                  "field": "team_stats.fg_3p.ast.early"
               }
            },
            "total_off_trans_2prim_attempts": {
               "sum": {
                  "field": "team_stats.fg_rim.attempts.early"
               }
            },
            "total_off_trans_2prim_made": {
               "sum": {
                  "field": "team_stats.fg_rim.made.early"
               }
            },
            "total_off_trans_2prim_ast": {
               "sum": {
                  "field": "team_stats.fg_rim.ast.early"
               }
            },
            "total_off_trans_2pmid_attempts": {
               "sum": {
                  "field": "team_stats.fg_mid.attempts.early"
               }
            },
            "total_off_trans_2pmid_made": {
               "sum": {
                  "field": "team_stats.fg_mid.made.early"
               }
            },
            "total_off_trans_2pmid_ast": {
               "sum": {
                  "field": "team_stats.fg_mid.ast.early"
               }
            },
            "total_off_trans_fga": {
               "sum": {
                  "field": "team_stats.fg.attempts.early"
               }
            },
            "total_off_trans_fgm": {
               "sum": {
                  "field": "team_stats.fg.made.early"
               }
            },
            "total_off_trans_fta": {
               "sum": {
                  "field": "team_stats.ft.attempts.early"
               }
            },
            "total_off_trans_ftm": {
               "sum": {
                  "field": "team_stats.ft.made.early"
               }
            },
            "total_off_orb": {
               "sum": {
                  "field": "team_stats.orb.total"
               }
            },
            "total_off_drb": {
               "sum": {
                  "field": "team_stats.drb.total"
               }
            },
            "off_2p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_2p_made",
                     "my_var2": "total_off_2p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_2p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_2p_ast",
                     "my_var2": "total_off_2p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_3p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_3p_made",
                     "my_var2": "total_off_3p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_3p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_3p_ast",
                     "my_var2": "total_off_3p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_2prim": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_2prim_made",
                     "my_var2": "total_off_2prim_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_2prim_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_2prim_ast",
                     "my_var2": "total_off_2prim_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_2pmid": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_2pmid_made",
                     "my_var2": "total_off_2pmid_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_2pmid_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_2pmid_ast",
                     "my_var2": "total_off_2pmid_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_ft": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_ftm",
                     "my_var2": "total_off_fta"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_ftr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_fta",
                     "my_var2": "total_off_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_2primr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_2prim_attempts",
                     "my_var2": "total_off_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_2pmidr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_2pmid_attempts",
                     "my_var2": "total_off_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_3pr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_3p_attempts",
                     "my_var2": "total_off_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_assist": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_assist",
                     "my_var2": "total_off_fgm"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_2p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_2p_made",
                     "my_var2": "total_off_scramble_2p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_2p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_2p_ast",
                     "my_var2": "total_off_scramble_2p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_3p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_3p_made",
                     "my_var2": "total_off_scramble_3p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_3p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_3p_ast",
                     "my_var2": "total_off_scramble_3p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_2prim": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_2prim_made",
                     "my_var2": "total_off_scramble_2prim_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_2prim_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_2prim_ast",
                     "my_var2": "total_off_scramble_2prim_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_2pmid": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_2pmid_made",
                     "my_var2": "total_off_scramble_2pmid_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_2pmid_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_2pmid_ast",
                     "my_var2": "total_off_scramble_2pmid_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_ft": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_ftm",
                     "my_var2": "total_off_scramble_fta"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_ftr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_fta",
                     "my_var2": "total_off_scramble_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_2primr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_2prim_attempts",
                     "my_var2": "total_off_scramble_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_2pmidr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_2pmid_attempts",
                     "my_var2": "total_off_scramble_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_3pr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_3p_attempts",
                     "my_var2": "total_off_scramble_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_assist": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_assist",
                     "my_var2": "total_off_scramble_fgm"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_2p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_2p_made",
                     "my_var2": "total_off_trans_2p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_2p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_2p_ast",
                     "my_var2": "total_off_trans_2p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_3p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_3p_made",
                     "my_var2": "total_off_trans_3p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_3p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_3p_ast",
                     "my_var2": "total_off_trans_3p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_2prim": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_2prim_made",
                     "my_var2": "total_off_trans_2prim_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_2prim_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_2prim_ast",
                     "my_var2": "total_off_trans_2prim_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_2pmid": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_2pmid_made",
                     "my_var2": "total_off_trans_2pmid_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_2pmid_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_2pmid_ast",
                     "my_var2": "total_off_trans_2pmid_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_ft": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_ftm",
                     "my_var2": "total_off_trans_fta"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_ftr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_fta",
                     "my_var2": "total_off_trans_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_2primr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_2prim_attempts",
                     "my_var2": "total_off_trans_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_2pmidr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_2pmid_attempts",
                     "my_var2": "total_off_trans_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_3pr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_3p_attempts",
                     "my_var2": "total_off_trans_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_assist": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_assist",
                     "my_var2": "total_off_trans_fgm"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "total_off_ast_rim": {
               "sum": {
                  "field": "team_stats.ast_rim.counts.total"
               }
            },
            "off_ast_rim": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_ast_rim",
                     "my_var2": "total_off_assist"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "total_off_ast_mid": {
               "sum": {
                  "field": "team_stats.ast_mid.counts.total"
               }
            },
            "off_ast_mid": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_ast_mid",
                     "my_var2": "total_off_assist"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "total_off_ast_3p": {
               "sum": {
                  "field": "team_stats.ast_3p.counts.total"
               }
            },
            "off_ast_3p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_ast_3p",
                     "my_var2": "total_off_assist"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "total_off_scramble_pts": {
               "bucket_script": {
                  "buckets_path": {
                     "made3p": "total_off_scramble_3p_made",
                     "made2p": "total_off_scramble_2p_made",
                     "ftm": "total_off_scramble_ftm"
                  },
                  "script": "3*params.made3p + 2*params.made2p + params.ftm"
               }
            },
            "total_off_scramble_poss": {
               "bucket_script": {
                  "buckets_path": {
                     "fga": "total_off_scramble_fga",
                     "fgm": "total_off_scramble_fgm",
                     "fta": "total_off_scramble_fta",
                     "to": "total_off_scramble_to",
                     "var_orb": "total_off_orb",
                     "var_drb": "total_def_drb"
                  },
                  "script": "\\n            def fgM = params.fga - params.fgm;\\n            def rebound_pct = (params.var_orb > 0) ? 1.0*params.var_orb/(params.var_orb + params.var_drb) : 0.0;\\n            return params.fgm + (1.0 - rebound_pct)*fgM + 0.475*params.fta + params.to;\\n          "
               }
            },
            "total_off_trans_pts": {
               "bucket_script": {
                  "buckets_path": {
                     "made3p": "total_off_trans_3p_made",
                     "made2p": "total_off_trans_2p_made",
                     "ftm": "total_off_trans_ftm"
                  },
                  "script": "3*params.made3p + 2*params.made2p + params.ftm"
               }
            },
            "total_off_trans_poss": {
               "bucket_script": {
                  "buckets_path": {
                     "fga": "total_off_trans_fga",
                     "fgm": "total_off_trans_fgm",
                     "fta": "total_off_trans_fta",
                     "to": "total_off_trans_to",
                     "var_orb": "total_off_orb",
                     "var_drb": "total_def_drb"
                  },
                  "script": "\\n            def fgM = params.fga - params.fgm;\\n            def rebound_pct = (params.var_orb > 0) ? 1.0*params.var_orb/(params.var_orb + params.var_drb) : 0.0;\\n            return params.fgm + (1.0 - rebound_pct)*fgM + 0.475*params.fta + params.to;\\n          "
               }
            },
            "off_ppp": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_pts",
                     "my_var2": "total_off_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 100*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_to": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_to",
                     "my_var2": "total_off_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_ppp": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_pts",
                     "my_var2": "total_off_scramble_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 100*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_scramble_to": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_scramble_to",
                     "my_var2": "total_off_scramble_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_ppp": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_pts",
                     "my_var2": "total_off_trans_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 100*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_trans_to": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_off_trans_to",
                     "my_var2": "total_off_trans_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "off_poss": {
               "bucket_script": {
                  "buckets_path": {
                     "var": "total_off_poss"
                  },
                  "script": "params.var"
               }
            },
            "off_orb": {
               "bucket_script": {
                  "buckets_path": {
                     "var_orb": "total_off_orb",
                     "var_drb": "total_def_drb"
                  },
                  "script": "(params.var_orb > 0) ? 1.0*params.var_orb/(params.var_orb + params.var_drb) : 0.0"
               }
            },
            "off_efg": {
               "bucket_script": {
                  "buckets_path": {
                     "my_varFG": "total_off_fga",
                     "my_var2": "total_off_2p_made",
                     "my_var3": "total_off_3p_made"
                  },
                  "script": "(params.my_varFG > 0) ? (1.0*params.my_var2 + 1.5*params.my_var3) / params.my_varFG : 0"
               }
            },
            "off_scramble_efg": {
               "bucket_script": {
                  "buckets_path": {
                     "my_varFG": "total_off_scramble_fga",
                     "my_var2": "total_off_scramble_2p_made",
                     "my_var3": "total_off_scramble_3p_made"
                  },
                  "script": "(params.my_varFG > 0) ? (1.0*params.my_var2 + 1.5*params.my_var3) / params.my_varFG : 0"
               }
            },
            "off_trans_efg": {
               "bucket_script": {
                  "buckets_path": {
                     "my_varFG": "total_off_trans_fga",
                     "my_var2": "total_off_trans_2p_made",
                     "my_var3": "total_off_trans_3p_made"
                  },
                  "script": "(params.my_varFG > 0) ? (1.0*params.my_var2 + 1.5*params.my_var3) / params.my_varFG : 0"
               }
            },
            "off_adj_opp": {
               "weighted_avg": {
                  "weight": {
                     "field": "opponent_stats.num_possessions"
                  },
                  "value": {
                     "script": {
                        "source": "\\n  def hca = 0.0;\\n  if (doc[\\"location_type.keyword\\"].value == \\"Home\\") {\\n    hca = params.off_hca;\\n  } else if (doc[\\"location_type.keyword\\"].value == \\"Away\\") {\\n    hca = -params.off_hca;\\n  }\\n\\n  def adj_sos = null;\\n  if (doc[\\"vs_adj_off\\"].size()  > 0) {\\n     adj_sos = doc[\\"vs_adj_off\\"].value - hca;\\n  }\\n  \\nreturn adj_sos;",
                        "lang": "painless",
                        "params": {
                           "avgEff": 100,
                           "off_hca": 1,
                           "def_hca": -1
                        }
                     }
                  }
               }
            },
            "off_adj_ppp": {
               "weighted_avg": {
                  "weight": {
                     "field": "team_stats.num_possessions"
                  },
                  "value": {
                     "script": {
                        "source": "\\n  def hca = 0.0;\\n  if (doc[\\"location_type.keyword\\"].value == \\"Home\\") {\\n    hca = params.def_hca;\\n  } else if (doc[\\"location_type.keyword\\"].value == \\"Away\\") {\\n    hca = -params.def_hca;\\n  }\\n\\n  def adj_sos = null;\\n  if (doc[\\"vs_adj_def\\"].size()  > 0) {\\n     adj_sos = doc[\\"vs_adj_def\\"].value - hca;\\n  }\\n  \\n                    if (null != adj_sos) {\\n                       def bottom = adj_sos*doc[\\"team_stats.num_possessions\\"].value;\\n                       return (bottom > 0) ?\\n                         100.0*doc[\\"team_stats.pts\\"].value*params.avgEff/bottom : params.avgEff;\\n                    } else {\\n                      return null;\\n                    }\\n                  ",
                        "lang": "painless",
                        "params": {
                           "avgEff": 100,
                           "off_hca": 1,
                           "def_hca": -1
                        }
                     }
                  }
               }
            },
            "total_def_poss": {
               "sum": {
                  "field": "opponent_stats.num_possessions"
               }
            },
            "total_def_pts": {
               "sum": {
                  "field": "opponent_stats.pts"
               }
            },
            "total_def_to": {
               "sum": {
                  "field": "opponent_stats.to.total"
               }
            },
            "total_def_assist": {
               "sum": {
                  "field": "opponent_stats.assist.total"
               }
            },
            "total_def_scramble_to": {
               "sum": {
                  "field": "opponent_stats.to.orb"
               }
            },
            "total_def_scramble_assist": {
               "sum": {
                  "field": "opponent_stats.assist.orb"
               }
            },
            "total_def_trans_to": {
               "sum": {
                  "field": "opponent_stats.to.early"
               }
            },
            "total_def_trans_assist": {
               "sum": {
                  "field": "opponent_stats.assist.early"
               }
            },
            "total_def_stl": {
               "sum": {
                  "field": "opponent_stats.stl.total"
               }
            },
            "total_def_blk": {
               "sum": {
                  "field": "opponent_stats.blk.total"
               }
            },
            "total_def_foul": {
               "sum": {
                  "field": "opponent_stats.foul.total"
               }
            },
            "total_def_2p_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_2p.attempts.total"
               }
            },
            "total_def_2p_made": {
               "sum": {
                  "field": "opponent_stats.fg_2p.made.total"
               }
            },
            "total_def_2p_ast": {
               "sum": {
                  "field": "opponent_stats.fg_2p.ast.total"
               }
            },
            "total_def_3p_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_3p.attempts.total"
               }
            },
            "total_def_3p_made": {
               "sum": {
                  "field": "opponent_stats.fg_3p.made.total"
               }
            },
            "total_def_3p_ast": {
               "sum": {
                  "field": "opponent_stats.fg_3p.ast.total"
               }
            },
            "total_def_2prim_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_rim.attempts.total"
               }
            },
            "total_def_2prim_made": {
               "sum": {
                  "field": "opponent_stats.fg_rim.made.total"
               }
            },
            "total_def_2prim_ast": {
               "sum": {
                  "field": "opponent_stats.fg_rim.ast.total"
               }
            },
            "total_def_2pmid_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_mid.attempts.total"
               }
            },
            "total_def_2pmid_made": {
               "sum": {
                  "field": "opponent_stats.fg_mid.made.total"
               }
            },
            "total_def_2pmid_ast": {
               "sum": {
                  "field": "opponent_stats.fg_mid.ast.total"
               }
            },
            "total_def_fga": {
               "sum": {
                  "field": "opponent_stats.fg.attempts.total"
               }
            },
            "total_def_fgm": {
               "sum": {
                  "field": "opponent_stats.fg.made.total"
               }
            },
            "total_def_fta": {
               "sum": {
                  "field": "opponent_stats.ft.attempts.total"
               }
            },
            "total_def_ftm": {
               "sum": {
                  "field": "opponent_stats.ft.made.total"
               }
            },
            "total_def_scramble_2p_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_2p.attempts.orb"
               }
            },
            "total_def_scramble_2p_made": {
               "sum": {
                  "field": "opponent_stats.fg_2p.made.orb"
               }
            },
            "total_def_scramble_2p_ast": {
               "sum": {
                  "field": "opponent_stats.fg_2p.ast.orb"
               }
            },
            "total_def_scramble_3p_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_3p.attempts.orb"
               }
            },
            "total_def_scramble_3p_made": {
               "sum": {
                  "field": "opponent_stats.fg_3p.made.orb"
               }
            },
            "total_def_scramble_3p_ast": {
               "sum": {
                  "field": "opponent_stats.fg_3p.ast.orb"
               }
            },
            "total_def_scramble_2prim_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_rim.attempts.orb"
               }
            },
            "total_def_scramble_2prim_made": {
               "sum": {
                  "field": "opponent_stats.fg_rim.made.orb"
               }
            },
            "total_def_scramble_2prim_ast": {
               "sum": {
                  "field": "opponent_stats.fg_rim.ast.orb"
               }
            },
            "total_def_scramble_2pmid_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_mid.attempts.orb"
               }
            },
            "total_def_scramble_2pmid_made": {
               "sum": {
                  "field": "opponent_stats.fg_mid.made.orb"
               }
            },
            "total_def_scramble_2pmid_ast": {
               "sum": {
                  "field": "opponent_stats.fg_mid.ast.orb"
               }
            },
            "total_def_scramble_fga": {
               "sum": {
                  "field": "opponent_stats.fg.attempts.orb"
               }
            },
            "total_def_scramble_fgm": {
               "sum": {
                  "field": "opponent_stats.fg.made.orb"
               }
            },
            "total_def_scramble_fta": {
               "sum": {
                  "field": "opponent_stats.ft.attempts.orb"
               }
            },
            "total_def_scramble_ftm": {
               "sum": {
                  "field": "opponent_stats.ft.made.orb"
               }
            },
            "total_def_trans_2p_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_2p.attempts.early"
               }
            },
            "total_def_trans_2p_made": {
               "sum": {
                  "field": "opponent_stats.fg_2p.made.early"
               }
            },
            "total_def_trans_2p_ast": {
               "sum": {
                  "field": "opponent_stats.fg_2p.ast.early"
               }
            },
            "total_def_trans_3p_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_3p.attempts.early"
               }
            },
            "total_def_trans_3p_made": {
               "sum": {
                  "field": "opponent_stats.fg_3p.made.early"
               }
            },
            "total_def_trans_3p_ast": {
               "sum": {
                  "field": "opponent_stats.fg_3p.ast.early"
               }
            },
            "total_def_trans_2prim_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_rim.attempts.early"
               }
            },
            "total_def_trans_2prim_made": {
               "sum": {
                  "field": "opponent_stats.fg_rim.made.early"
               }
            },
            "total_def_trans_2prim_ast": {
               "sum": {
                  "field": "opponent_stats.fg_rim.ast.early"
               }
            },
            "total_def_trans_2pmid_attempts": {
               "sum": {
                  "field": "opponent_stats.fg_mid.attempts.early"
               }
            },
            "total_def_trans_2pmid_made": {
               "sum": {
                  "field": "opponent_stats.fg_mid.made.early"
               }
            },
            "total_def_trans_2pmid_ast": {
               "sum": {
                  "field": "opponent_stats.fg_mid.ast.early"
               }
            },
            "total_def_trans_fga": {
               "sum": {
                  "field": "opponent_stats.fg.attempts.early"
               }
            },
            "total_def_trans_fgm": {
               "sum": {
                  "field": "opponent_stats.fg.made.early"
               }
            },
            "total_def_trans_fta": {
               "sum": {
                  "field": "opponent_stats.ft.attempts.early"
               }
            },
            "total_def_trans_ftm": {
               "sum": {
                  "field": "opponent_stats.ft.made.early"
               }
            },
            "total_def_orb": {
               "sum": {
                  "field": "opponent_stats.orb.total"
               }
            },
            "total_def_drb": {
               "sum": {
                  "field": "opponent_stats.drb.total"
               }
            },
            "def_2p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_2p_made",
                     "my_var2": "total_def_2p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_2p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_2p_ast",
                     "my_var2": "total_def_2p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_3p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_3p_made",
                     "my_var2": "total_def_3p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_3p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_3p_ast",
                     "my_var2": "total_def_3p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_2prim": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_2prim_made",
                     "my_var2": "total_def_2prim_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_2prim_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_2prim_ast",
                     "my_var2": "total_def_2prim_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_2pmid": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_2pmid_made",
                     "my_var2": "total_def_2pmid_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_2pmid_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_2pmid_ast",
                     "my_var2": "total_def_2pmid_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_ft": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_ftm",
                     "my_var2": "total_def_fta"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_ftr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_fta",
                     "my_var2": "total_def_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_2primr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_2prim_attempts",
                     "my_var2": "total_def_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_2pmidr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_2pmid_attempts",
                     "my_var2": "total_def_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_3pr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_3p_attempts",
                     "my_var2": "total_def_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_assist": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_assist",
                     "my_var2": "total_def_fgm"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_2p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_2p_made",
                     "my_var2": "total_def_scramble_2p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_2p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_2p_ast",
                     "my_var2": "total_def_scramble_2p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_3p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_3p_made",
                     "my_var2": "total_def_scramble_3p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_3p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_3p_ast",
                     "my_var2": "total_def_scramble_3p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_2prim": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_2prim_made",
                     "my_var2": "total_def_scramble_2prim_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_2prim_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_2prim_ast",
                     "my_var2": "total_def_scramble_2prim_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_2pmid": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_2pmid_made",
                     "my_var2": "total_def_scramble_2pmid_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_2pmid_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_2pmid_ast",
                     "my_var2": "total_def_scramble_2pmid_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_ft": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_ftm",
                     "my_var2": "total_def_scramble_fta"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_ftr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_fta",
                     "my_var2": "total_def_scramble_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_2primr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_2prim_attempts",
                     "my_var2": "total_def_scramble_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_2pmidr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_2pmid_attempts",
                     "my_var2": "total_def_scramble_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_3pr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_3p_attempts",
                     "my_var2": "total_def_scramble_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_assist": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_assist",
                     "my_var2": "total_def_scramble_fgm"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_2p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_2p_made",
                     "my_var2": "total_def_trans_2p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_2p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_2p_ast",
                     "my_var2": "total_def_trans_2p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_3p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_3p_made",
                     "my_var2": "total_def_trans_3p_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_3p_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_3p_ast",
                     "my_var2": "total_def_trans_3p_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_2prim": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_2prim_made",
                     "my_var2": "total_def_trans_2prim_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_2prim_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_2prim_ast",
                     "my_var2": "total_def_trans_2prim_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_2pmid": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_2pmid_made",
                     "my_var2": "total_def_trans_2pmid_attempts"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_2pmid_ast": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_2pmid_ast",
                     "my_var2": "total_def_trans_2pmid_made"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_ft": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_ftm",
                     "my_var2": "total_def_trans_fta"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_ftr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_fta",
                     "my_var2": "total_def_trans_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_2primr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_2prim_attempts",
                     "my_var2": "total_def_trans_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_2pmidr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_2pmid_attempts",
                     "my_var2": "total_def_trans_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_3pr": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_3p_attempts",
                     "my_var2": "total_def_trans_fga"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_assist": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_assist",
                     "my_var2": "total_def_trans_fgm"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "total_def_ast_rim": {
               "sum": {
                  "field": "opponent_stats.ast_rim.counts.total"
               }
            },
            "def_ast_rim": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_ast_rim",
                     "my_var2": "total_def_assist"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "total_def_ast_mid": {
               "sum": {
                  "field": "opponent_stats.ast_mid.counts.total"
               }
            },
            "def_ast_mid": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_ast_mid",
                     "my_var2": "total_def_assist"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "total_def_ast_3p": {
               "sum": {
                  "field": "opponent_stats.ast_3p.counts.total"
               }
            },
            "def_ast_3p": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_ast_3p",
                     "my_var2": "total_def_assist"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "total_def_scramble_pts": {
               "bucket_script": {
                  "buckets_path": {
                     "made3p": "total_def_scramble_3p_made",
                     "made2p": "total_def_scramble_2p_made",
                     "ftm": "total_def_scramble_ftm"
                  },
                  "script": "3*params.made3p + 2*params.made2p + params.ftm"
               }
            },
            "total_def_scramble_poss": {
               "bucket_script": {
                  "buckets_path": {
                     "fga": "total_def_scramble_fga",
                     "fgm": "total_def_scramble_fgm",
                     "fta": "total_def_scramble_fta",
                     "to": "total_def_scramble_to",
                     "var_orb": "total_def_orb",
                     "var_drb": "total_off_drb"
                  },
                  "script": "\\n            def fgM = params.fga - params.fgm;\\n            def rebound_pct = (params.var_orb > 0) ? 1.0*params.var_orb/(params.var_orb + params.var_drb) : 0.0;\\n            return params.fgm + (1.0 - rebound_pct)*fgM + 0.475*params.fta + params.to;\\n          "
               }
            },
            "total_def_trans_pts": {
               "bucket_script": {
                  "buckets_path": {
                     "made3p": "total_def_trans_3p_made",
                     "made2p": "total_def_trans_2p_made",
                     "ftm": "total_def_trans_ftm"
                  },
                  "script": "3*params.made3p + 2*params.made2p + params.ftm"
               }
            },
            "total_def_trans_poss": {
               "bucket_script": {
                  "buckets_path": {
                     "fga": "total_def_trans_fga",
                     "fgm": "total_def_trans_fgm",
                     "fta": "total_def_trans_fta",
                     "to": "total_def_trans_to",
                     "var_orb": "total_def_orb",
                     "var_drb": "total_off_drb"
                  },
                  "script": "\\n            def fgM = params.fga - params.fgm;\\n            def rebound_pct = (params.var_orb > 0) ? 1.0*params.var_orb/(params.var_orb + params.var_drb) : 0.0;\\n            return params.fgm + (1.0 - rebound_pct)*fgM + 0.475*params.fta + params.to;\\n          "
               }
            },
            "def_ppp": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_pts",
                     "my_var2": "total_def_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 100*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_to": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_to",
                     "my_var2": "total_def_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_ppp": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_pts",
                     "my_var2": "total_def_scramble_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 100*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_scramble_to": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_scramble_to",
                     "my_var2": "total_def_scramble_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_ppp": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_pts",
                     "my_var2": "total_def_trans_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 100*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_trans_to": {
               "bucket_script": {
                  "buckets_path": {
                     "my_var1": "total_def_trans_to",
                     "my_var2": "total_def_trans_poss"
                  },
                  "script": "(params.my_var1 > 0) ? 1*params.my_var1 / params.my_var2 : 0"
               }
            },
            "def_poss": {
               "bucket_script": {
                  "buckets_path": {
                     "var": "total_def_poss"
                  },
                  "script": "params.var"
               }
            },
            "def_orb": {
               "bucket_script": {
                  "buckets_path": {
                     "var_orb": "total_def_orb",
                     "var_drb": "total_off_drb"
                  },
                  "script": "(params.var_orb > 0) ? 1.0*params.var_orb/(params.var_orb + params.var_drb) : 0.0"
               }
            },
            "def_efg": {
               "bucket_script": {
                  "buckets_path": {
                     "my_varFG": "total_def_fga",
                     "my_var2": "total_def_2p_made",
                     "my_var3": "total_def_3p_made"
                  },
                  "script": "(params.my_varFG > 0) ? (1.0*params.my_var2 + 1.5*params.my_var3) / params.my_varFG : 0"
               }
            },
            "def_scramble_efg": {
               "bucket_script": {
                  "buckets_path": {
                     "my_varFG": "total_def_scramble_fga",
                     "my_var2": "total_def_scramble_2p_made",
                     "my_var3": "total_def_scramble_3p_made"
                  },
                  "script": "(params.my_varFG > 0) ? (1.0*params.my_var2 + 1.5*params.my_var3) / params.my_varFG : 0"
               }
            },
            "def_trans_efg": {
               "bucket_script": {
                  "buckets_path": {
                     "my_varFG": "total_def_trans_fga",
                     "my_var2": "total_def_trans_2p_made",
                     "my_var3": "total_def_trans_3p_made"
                  },
                  "script": "(params.my_varFG > 0) ? (1.0*params.my_var2 + 1.5*params.my_var3) / params.my_varFG : 0"
               }
            },
            "def_adj_opp": {
               "weighted_avg": {
                  "weight": {
                     "field": "team_stats.num_possessions"
                  },
                  "value": {
                     "script": {
                        "source": "\\n  def hca = 0.0;\\n  if (doc[\\"location_type.keyword\\"].value == \\"Home\\") {\\n    hca = params.def_hca;\\n  } else if (doc[\\"location_type.keyword\\"].value == \\"Away\\") {\\n    hca = -params.def_hca;\\n  }\\n\\n  def adj_sos = null;\\n  if (doc[\\"vs_adj_def\\"].size()  > 0) {\\n     adj_sos = doc[\\"vs_adj_def\\"].value - hca;\\n  }\\n  \\nreturn adj_sos;",
                        "lang": "painless",
                        "params": {
                           "avgEff": 100,
                           "off_hca": 1,
                           "def_hca": -1
                        }
                     }
                  }
               }
            },
            "def_3p_opp": {
               "weighted_avg": {
                  "weight": {
                     "field": "opponent_stats.fg_3p.attempts.total"
                  },
                  "value": {
                     "field": "vs_3p"
                  }
               }
            },
            "def_adj_ppp": {
               "weighted_avg": {
                  "weight": {
                     "field": "opponent_stats.num_possessions"
                  },
                  "value": {
                     "script": {
                        "source": "\\n  def hca = 0.0;\\n  if (doc[\\"location_type.keyword\\"].value == \\"Home\\") {\\n    hca = params.off_hca;\\n  } else if (doc[\\"location_type.keyword\\"].value == \\"Away\\") {\\n    hca = -params.off_hca;\\n  }\\n\\n  def adj_sos = null;\\n  if (doc[\\"vs_adj_off\\"].size()  > 0) {\\n     adj_sos = doc[\\"vs_adj_off\\"].value - hca;\\n  }\\n  \\n                    if (null != adj_sos) {\\n                       def bottom = adj_sos*doc[\\"opponent_stats.num_possessions\\"].value;\\n                       return (bottom > 0) ?\\n                         100.0*doc[\\"opponent_stats.pts\\"].value*params.avgEff/bottom : params.avgEff;\\n                    } else {\\n                      return null;\\n                    }\\n                  ",
                        "lang": "painless",
                        "params": {
                           "avgEff": 100,
                           "off_hca": 1,
                           "def_hca": -1
                        }
                     }
                  }
               }
            },
            "duration_mins": {
               "sum": {
                  "field": "duration_mins"
               }
            },
            "players_array": {
               "top_hits": {
                  "size": 1,
                  "_source": {
                     "includes": "players"
                  }
               }
            },
            "sort_by_poss": {
               "bucket_sort": {
                  "sort": [
                     {
                        "off_poss": {
                           "order": "desc"
                        }
                     }
                  ]
               }
            }
         },
         "terms": {
            "field": "lineup_id.keyword",
            "size": 1000
         }
      }
   },
   "query": {
      "bool": {
         "filter": [],
         "must_not": [],
         "should": [],
         "must": [
            {
               "bool": {
                  "filter": [],
                  "must_not": [],
                  "should": [],
                  "minimum_should_match": 0,
                  "must": [
                     {
                        "term": {
                           "team.team.keyword": "TestTeam"
                        }
                     },
                     {
                        "query_string": {
                           "query": "vs_rank:[10 TO 100]"
                        }
                     }
                  ]
               }
            },
            {
               "query_string": {
                  "query": "players.id:(base)"
               }
            }
         ]
      }
   }
}
`;
